num_coarse_samples:  # int, the number of samples for coarse nerf.
num_fine_samples:  # int, the number of samples for fine nerf.
use_viewdirs: # bool, use viewdirs as a condition.
near: # float, near clip.
far: # float, far clip.
noise_std: # float, std dev of noise added to regularize sigma output.
nerf_trunk_depth: # int, the depth of the first part of MLP.
nerf_trunk_width: # int, the width of the first part of MLP.
nerf_rgb_branch_depth: # int, the depth of the second part of MLP.
nerf_rgb_branch_width: int, the width of the second part of MLP.
activation: the activation function used in the MLP.
sigma_activation: the activation function applied to the sigma density.
nerf_skips: which layers to add skip layers in the NeRF model.
alpha_channels: int, the number of alpha_channelss.
rgb_channels: int, the number of rgb_channelss.
use_stratified_sampling: use stratified sampling.
use_white_background: composite rendering on to a white background.
num_nerf_point_freqs: degree of positional encoding for positions.
num_nerf_viewdir_freqs: degree of positional encoding for viewdirs.
use_linear_disparity: sample linearly in disparity rather than depth.
num_appearance_embeddings: the number of appearance exemplars.
num_appearance_features: the dimension size for the appearance code.
num_camera_embeddings: the number of camera exemplars.
num_camera_features: the dimension size for the camera code.

num_warp_freqs: 8 # the number of frequencies for the warp positional encoding.
num_warp_embeddings: the number of embeddings for the warp GLO encoder.
num_warp_features: the number of features for the warp GLO encoder.

use_appearance_metadata: if True use the appearance metadata.
use_camera_metadata: True # if True use the camera metadata.
use_warp: True # whether to use the warp field or not.
use_warp_jacobian: if True the model computes and returns the Jacobian of
  the warped points.
use_weights: if True return the density weights.
use_trunk_condition: whether to feed the appearance metadata to the trunk.
use_alpha_condition: whether to feed the appearance metadata to the alpha
  branch.
use_rgb_condition: whether to feed the appearance metadata to the rgb
  branch.
warp_kwargs: extra keyword arguments for the warp field.

lr_delay_steps : 2500
lr_delay_mult : 0.01

# schedule configuration
annealed_warp_alpha_schedule :
  - type : linear
  - initial_value : 0.0
  - final_value : 8 # ssynch with num_warp_freqs
  - num_steps : 80000
constant_warp_alpha_schedule :
  - type : constant
  - value : 8 # ssynch with num_warp_freqs
constant_elastic_loss_schedule :
  - type : constant
  - value : 0.01 # synch with elastic_init_weight
decaying_elastic_loss_schedule :
  - type : piecewise
  - schedule :
    - 50000
    - constant
    - 0.01



elastic_init_weight : 0.01
use_elastic_loss:  True
use_background_loss: True

"""
# From model
num_coarse_samples: int
num_fine_samples: int
use_viewdirs: bool
near: float
far: float
noise_std: Optional[float]
nerf_trunk_depth: int
nerf_trunk_width: int
nerf_rgb_branch_depth: int
nerf_rgb_branch_width: int
nerf_skips: Tuple[int]
alpha_channels: int
rgb_channels: int
use_stratified_sampling: bool
num_nerf_point_freqs: int
num_nerf_viewdir_freqs: int

appearance_ids: Sequence[int]
camera_ids: Sequence[int]
warp_ids: Sequence[int]

num_appearance_features: int
num_camera_features: int
num_warp_features: int
num_warp_freqs: int

activation: types.Activation = nn.relu
sigma_activation: types.Activation = nn.relu
use_white_background: bool = False
use_linear_disparity: bool = False
use_sample_at_infinity: bool = True

warp_field_type: str = 'se3'
warp_metadata_encoder_type: str = 'glo'
use_appearance_metadata: bool = False
use_camera_metadata: bool = False
use_warp: bool = False
use_warp_jacobian: True
use_weights: bool = False
use_trunk_condition: bool = False
use_alpha_condition: bool = False
use_rgb_condition: bool = False
warp_kwargs: Mapping[str, Any] = immutabledict.immutabledict()

metadata_encoded: bool = False